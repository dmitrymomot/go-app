// Code generated by mockery v2.28.1. DO NOT EDIT.

package jwt_mocks

import (
	jwt "github.com/dmitrymomot/go-app/pkg/jwt"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Interactor is an autogenerated mock type for the Interactor type
type Interactor struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: id, subject, ttl, audience
func (_m *Interactor) GenerateToken(id string, subject string, ttl time.Duration, audience ...string) (string, error) {
	_va := make([]interface{}, len(audience))
	for _i := range audience {
		_va[_i] = audience[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, subject, ttl)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration, ...string) (string, error)); ok {
		return rf(id, subject, ttl, audience...)
	}
	if rf, ok := ret.Get(0).(func(string, string, time.Duration, ...string) string); ok {
		r0 = rf(id, subject, ttl, audience...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, time.Duration, ...string) error); ok {
		r1 = rf(id, subject, ttl, audience...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: token, audience
func (_m *Interactor) ValidateToken(token string, audience string) (*jwt.Claims, error) {
	ret := _m.Called(token, audience)

	var r0 *jwt.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*jwt.Claims, error)); ok {
		return rf(token, audience)
	}
	if rf, ok := ret.Get(0).(func(string, string) *jwt.Claims); ok {
		r0 = rf(token, audience)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(token, audience)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewInteractor interface {
	mock.TestingT
	Cleanup(func())
}

// NewInteractor creates a new instance of Interactor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInteractor(t mockConstructorTestingTNewInteractor) *Interactor {
	mock := &Interactor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
